{"version":3,"file":"web.js","sourceRoot":"","sources":["../../src/web.ts"],"names":[],"mappings":"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","sourcesContent":["import { WebPlugin } from '@capacitor/core';\n\nimport type { SpeechSynthesisEngine, TextToSpeechPlugin, TTSOptions } from './definitions';\n\nexport class TextToSpeechWeb extends WebPlugin implements TextToSpeechPlugin {\n  private speechSynthesis: SpeechSynthesis | null = null;\n  private supportedVoices: SpeechSynthesisVoice[] | undefined;\n\n  constructor() {\n    super();\n    if ('speechSynthesis' in window) {\n      this.speechSynthesis = window.speechSynthesis;\n      window.addEventListener('beforeunload', () => {\n        this.stop();\n      });\n    }\n  }\n\n  public async speak(options: TTSOptions): Promise<void> {\n    if (!this.speechSynthesis) {\n      this.throwUnsupportedError();\n    }\n    await this.stop();\n    const speechSynthesis = this.speechSynthesis;\n    const utterance = this.createSpeechSynthesisUtterance(options);\n    return new Promise((resolve, reject) => {\n      utterance.onend = () => {\n        resolve();\n      };\n      utterance.onerror = (event: any) => {\n        reject(event);\n      };\n      speechSynthesis.speak(utterance);\n    });\n  }\n\n  public async stop(): Promise<void> {\n    if (!this.speechSynthesis) {\n      this.throwUnsupportedError();\n    }\n    this.speechSynthesis.cancel();\n  }\n\n  public async getSupportedLanguages(): Promise<{ languages: string[] }> {\n    const voices = this.getSpeechSynthesisVoices();\n    const languages = voices.map(voice => voice.lang);\n    const filteredLanguages = languages.filter((v, i, a) => a.indexOf(v) == i);\n    return { languages: filteredLanguages };\n  }\n\n  public async getSupportedVoices(): Promise<{\n    voices: SpeechSynthesisVoice[];\n  }> {\n    const voices = this.getSpeechSynthesisVoices();\n    return { voices };\n  }\n\n  public async isLanguageSupported(options: {\n    lang: string;\n  }): Promise<{ supported: boolean }> {\n    const result = await this.getSupportedLanguages();\n    const isLanguageSupported = result.languages.includes(options.lang);\n    return { supported: isLanguageSupported };\n  }\n\n  public async openInstall(): Promise<void> {\n    this.throwUnimplementedError();\n  }\n\n  private createSpeechSynthesisUtterance(\n    options: TTSOptions,\n  ): SpeechSynthesisUtterance {\n    const voices = this.getSpeechSynthesisVoices();\n    const utterance = new SpeechSynthesisUtterance();\n    const { text, lang, rate, pitch, volume, voice } = options;\n    if (voice) {\n      utterance.voice = voices[voice];\n    }\n    if (volume) {\n      utterance.volume = volume >= 0 && volume <= 1 ? volume : 1;\n    }\n    if (rate) {\n      utterance.rate = rate >= 0.1 && rate <= 10 ? rate : 1;\n    }\n    if (pitch) {\n      utterance.pitch = pitch >= 0 && pitch <= 2 ? pitch : 2;\n    }\n    if (lang) {\n      utterance.lang = lang;\n    }\n    utterance.text = text;\n    return utterance;\n  }\n\n  private getSpeechSynthesisVoices(): SpeechSynthesisVoice[] {\n    if (!this.speechSynthesis) {\n      this.throwUnsupportedError();\n    }\n    if (!this.supportedVoices || this.supportedVoices.length < 1) {\n      this.supportedVoices = this.speechSynthesis.getVoices();\n    }\n    return this.supportedVoices;\n  }\n\n\n  public async getSupportedEngines(): Promise<{\n    engines: SpeechSynthesisEngine[];\n  }> {\n    this.throwUnimplementedError();\n  }\n\n  public async switchEngine(engineName: { engineName: string }): Promise<void> {\n    engineName;\n    this.throwUnimplementedError();\n  };\n\n  public async getDefaults(): Promise<{\n    engine: string,\n    voice: string,\n    language: string,\n  }> {\n    this.throwUnimplementedError();\n  };\n\n  private throwUnsupportedError(): never {\n    throw this.unavailable(\n      'SpeechSynthesis API not available in this browser.',\n    );\n  }\n\n  private throwUnimplementedError(): never {\n    throw this.unimplemented('Not implemented on web.');\n  }\n}\n"]}